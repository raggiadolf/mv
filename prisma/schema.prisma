generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Participant {
  id                 Int             @id @default(autoincrement())
  race_id            Int
  user_id            String
  jerseys            Jersey[]
  Race               Race            @relation(fields: [race_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User               User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  strava_activity_id BigInt?
  segment_efforts    SegmentEffort[]
  jersey_set_at      DateTime?

  @@unique([race_id, user_id])
}

model Race {
  id                Int           @id @default(autoincrement())
  date              DateTime      @db.Timestamptz(6)
  Participant       Participant[]
  scheduled_race_id Int
  ScheduledRace     ScheduledRace @relation(fields: [scheduled_race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Session {
  id        String   @id
  userId    String?
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                   String        @id
  strava_id            Int           @unique
  strava_refresh_token String
  username             String
  firstname            String?
  lastname             String?
  profile              String?
  role                 Role          @default(USER)
  Participant          Participant[]
  Session              Session[]
  eligible_for_old     Boolean       @default(false)
}

model SegmentEffort {
  id                      Int          @id @default(autoincrement())
  strava_segment_id       BigInt
  elapsed_time_in_seconds Int
  start_date              DateTime
  end_date                DateTime
  is_kom                  Boolean
  average_watts           Float
  distance_in_meters      Float
  Participant             Participant? @relation(fields: [participantId], references: [id])
  participantId           Int?
  RaceSegment             RaceSegment? @relation(fields: [race_segment_id], references: [id])
  race_segment_id         Int?

  @@unique([participantId, race_segment_id])
}

model RaceSegment {
  id                Int             @id @default(autoincrement())
  strava_segment_id BigInt
  name              String?
  jersey            Jersey
  ScheduledRace     ScheduledRace?  @relation(fields: [scheduledRaceId], references: [id])
  scheduledRaceId   Int?
  SegmentEffort     SegmentEffort[]
}

model ScheduledRace {
  id           Int           @id @default(autoincrement())
  race_type    RaceType
  weekday      Int
  start_hour   Int
  start_minute Int
  title        String?
  RaceSegment  RaceSegment[]
  Race         Race[]
}

enum Jersey {
  YELLOW
  GREEN
  POLKA
  OLD
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum RaceType {
  RACE
  GROUPRIDE
}
